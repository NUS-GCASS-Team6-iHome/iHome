pipeline {
  agent {
    docker { image 'node:latest' }
  }
          environment {
                dockerImage = ''
                registry = 'feifeiliang/ihome-web-img'
                registryCredential='dockerid'
        }
  stages {
    stage('Install') {
      steps { sh 'npm install' }
    }

    stage('Build') {
      steps { sh 'npm run-script build' }
    }

    stage('Build image') {
                sh "pwd"
                dockerImage = docker.build registry
        }

         stage('Push image') {
        
                docker.withRegistry('', registryCredential) {
                        // app.push("${env.BUILD_NUMBER}")
                        dockerImage.push()
                }
        }


  }
}














// // This shows a simple example of how to archive the build output artifacts.
// node {
//         // stage('Checkout SCM'){
//         //         git branch: 'SP2', url: 'git@github.com:kalyan11021980/angular-ssr-starter.git'
//         // }
//         agent any
//         def dockerImage
//         environment {
//                 dockerImage = ''
//                 registry = 'feifeiliang/ihome-web-img'
//                 registryCredential='dockerid'
//         }

//         stage('Clone repository') {               
             
//             checkout scm    
//         } 

//         stage('Build image') {
//                 sh "pwd"
//                 dockerImage = docker.build registry
//         }

//         stage('Test image') {
  

//                 dockerImage.inside {
//                         sh 'echo "Tests passed"'
//                 }
//         }

//         stage('Push image') {
        
//                 docker.withRegistry('', registryCredential) {
//                         // app.push("${env.BUILD_NUMBER}")
//                         dockerImage.push()
//                 }
//         }

//         // Stopping Docker containers for cleaner Docker run
//         stage('docker stop container') {
//                 steps {
//                 sh 'docker ps -f name=ihomeWebAppContainer -q | xargs --no-run-if-empty docker container stop'
//                 sh 'docker container ls -a -fname=ihomeWebAppContainer -q | xargs -r docker container rm'
//          }
//        }
// }